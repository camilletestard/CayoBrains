discard.loser = c('juvenile male','infant','juvenile','juvenile female','adult male','adult female','unknown')                            # rows to discard
discard.winner = c("juvenile",'unknown','adult male','juvenile female','adult female','juvenile male','infant')            # rows to discard
Females.agonistic<-ago_events %>% filter (winner_sex == "Female", agonism_type %in% keep.type,
loser_sex == "Female", !(agonism_loser %in% discard.loser),
!(agonism_winner %in% discard.winner)) %>% select(winner = agonism_winner, loser = agonism_loser, date)
fem.list<- group_by_year %>% filter(sex == "F") %>% select(id)
Females.agonistic<- Females.agonistic %>% subset(winner %in% fem.list$id) %>% subset(loser %in% fem.list$id)
length(unique(c(as.character(Females.agonistic$winner),as.character(Females.agonistic$loser))))
#Build adjacency matrix
G<- graph_from_data_frame(Females.agonistic, directed= TRUE)
A <- as_adjacency_matrix(G,names=TRUE,sparse=FALSE,type='lower')
A<- A[,order(colnames(A))] #Order columns in alphabetical order
fem.matrix<- A[order(rownames(A)),]#Order rows in alphabetical order
diag(fem.matrix)<- 0 #Add zero to diagonal /self-interacions
#Save matrix
setwd(output.location)
write.csv(fem.matrix,'F.ago.matrx.csv')
#Find the matriline (supermom) for each focal individual
fem.list$mom <- ""
fem.list$supermom <- ""
R = nrow(fem.list)
for (i in 1:R){ # Find the supermoms for the females
mom = demo_data$`Behavior Mom`[match(fem.list$id[i],demo_data$`Animal ID`)]
while (!grepl("^[0-9]+$", mom, perl = T)){
if (!is.na(match(mom,fem.list$id))){
fem.list$mom[i] = paste(mom,fem.list$mom[i],sep = "/")
}
mom = demo_data$`Behavior Mom`[match(mom,demo_data$`Animal ID`)]
}
fem.list$supermom[i] =  mom
}
#Adjust the data to fit it into a data.tree
fem.list$mom =  substr(fem.list$mom,1,nchar(fem.list$mom)-1)
fem.list$pathString <- paste("Matriline",fem.list$supermom,fem.list$mom,fem.list$id,sep = "/")
fem.list <- fem.list %>% mutate_if(is.factor,as.character)
#Calculat #loses per animal from data matrix and add it to the fem.list dataframe
loses = colSums(fem.matrix, na.rm = FALSE, dims = 1) # number of loses sum
loses<- as.data.frame(loses)
setDT(loses, keep.rownames = TRUE)[]
fem.list$loses<- loses$loses[match(fem.list$id,loses$rn)]
#Calculat #wins per animal from data matrix and add it to the fem.list dataframe
wins = rowSums(fem.matrix, na.rm = FALSE, dims = 1) #number of wins sum
wins<- as.data.frame(wins)
setDT(wins, keep.rownames = TRUE)[]
fem.list$wins<- wins$wins[match(fem.list$id,wins$rn)]
#Add total number of interactions to manually calculat Elo Rating
fem.list$total<- (fem.list$loses+ fem.list$wins)
fem.list$Elo<- ((100 * fem.list$wins) - (100*fem.list$loses))/fem.list$total
Matri <- as.Node(fem.list)
Matri = Sort(Matri, attribute="loses", decreasing = FALSE)
Matri$Set(Rank = 1:Matri$totalCount)
print(Matri, "loses")
#Paste the rank in a dataframe
mat.frame <- ToDataFrameTree(Matri,"loses")
mat.frame$id<- as.character(mat.frame$levelName)
mat.frame$id <- trimws(mat.frame$id)
mat.frame$id <- substr(mat.frame$id, nchar(mat.frame$id)-2,nchar(mat.frame$id))
mat.frame$levelName<-NULL
output.location<-  'C:/Users/mp660/OneDrive - University of Exeter/PhD/Data/Behavioural data/Dominance'
raw.location <-"C:/Users/mp660/Dropbox/Cayo Data Cleaning/Output"
setwd(output.location)
# Import the demographics data for all years
demo_data <- read_excel('ANIMALES IN CS ALL MATRILINE FORM January 2020.xlsx')
#Define group and year of study
GROUP = "S"
YEAR = "2019"
GROUPYEAR = paste("Group",GROUP,YEAR,sep="")
#Import agonistic events and group by year
setwd(raw.location)
ago_events <- read.delim(paste(GROUPYEAR,"_AgonisticActions.txt",sep=""),sep=",")
group_by_year <- read.delim(paste(GROUPYEAR,"_GroupByYear.txt",sep=""),sep=",")
##Convert factors to vectors
ago_events <- ago_events %>%  mutate_if(is.factor, as.character)
#FEMALES--------
keep.type = c('avoid','contactagg','contactAgg','displace','feargrm','FearGrm','noncontactagg','noncontactAgg','submit','Submit',
'submit/threat','Submit/threat','threat') # rows to keep
discard.loser = c('juvenile male','infant','juvenile','juvenile female','adult male','adult female','unknown')                            # rows to discard
discard.winner = c("juvenile",'unknown','adult male','juvenile female','adult female','juvenile male','infant')            # rows to discard
Females.agonistic<-ago_events %>% filter (winner_sex == "Female", agonism_type %in% keep.type,
loser_sex == "Female", !(agonism_loser %in% discard.loser),
!(agonism_winner %in% discard.winner)) %>% select(winner = agonism_winner, loser = agonism_loser, date)
fem.list<- group_by_year %>% filter(sex == "F") %>% select(id)
Females.agonistic<- Females.agonistic %>% subset(winner %in% fem.list$id) %>% subset(loser %in% fem.list$id)
length(unique(c(as.character(Females.agonistic$winner),as.character(Females.agonistic$loser))))
#Build adjacency matrix
G<- graph_from_data_frame(Females.agonistic, directed= TRUE)
A <- as_adjacency_matrix(G,names=TRUE,sparse=FALSE,type='lower')
A<- A[,order(colnames(A))] #Order columns in alphabetical order
fem.matrix<- A[order(rownames(A)),]#Order rows in alphabetical order
diag(fem.matrix)<- 0 #Add zero to diagonal /self-interacions
#Save matrix
setwd(output.location)
write.csv(fem.matrix,'F.ago.matrx.csv')
#Find the matriline (supermom) for each focal individual
fem.list$mom <- ""
fem.list$supermom <- ""
R = nrow(fem.list)
for (i in 1:R){ # Find the supermoms for the females
mom = demo_data$`Behavior Mom`[match(fem.list$id[i],demo_data$`Animal ID`)]
while (!grepl("^[0-9]+$", mom, perl = T)){
if (!is.na(match(mom,fem.list$id))){
fem.list$mom[i] = paste(mom,fem.list$mom[i],sep = "/")
}
mom = demo_data$`Behavior Mom`[match(mom,demo_data$`Animal ID`)]
}
fem.list$supermom[i] =  mom
}
#Adjust the data to fit it into a data.tree
fem.list$mom =  substr(fem.list$mom,1,nchar(fem.list$mom)-1)
fem.list$pathString <- paste("Matriline",fem.list$supermom,fem.list$mom,fem.list$id,sep = "/")
fem.list <- fem.list %>% mutate_if(is.factor,as.character)
#Calculat #loses per animal from data matrix and add it to the fem.list dataframe
loses = colSums(fem.matrix, na.rm = FALSE, dims = 1) # number of loses sum
loses<- as.data.frame(loses)
setDT(loses, keep.rownames = TRUE)[]
fem.list$loses<- loses$loses[match(fem.list$id,loses$rn)]
#Calculat #wins per animal from data matrix and add it to the fem.list dataframe
wins = rowSums(fem.matrix, na.rm = FALSE, dims = 1) #number of wins sum
wins<- as.data.frame(wins)
setDT(wins, keep.rownames = TRUE)[]
fem.list$wins<- wins$wins[match(fem.list$id,wins$rn)]
#Add total number of interactions to manually calculat Elo Rating
fem.list$total<- (fem.list$loses+ fem.list$wins)
fem.list$Elo<- ((100 * fem.list$wins) - (100*fem.list$loses))/fem.list$total
View(fem.list)
Matri <- as.Node(fem.list)
Matri = Sort(Matri, attribute="loses", decreasing = FALSE)
print(Matri, "loses")
Matri = Sort(Matri, attribute="loses", decreasing = FALSE)
print(Matri, "loses")
library(dplyr)
library(tidyr)
library(igraph)
library(readxl)
library(data.tree)
library(EloRating)
library(data.table)
# Define location of files
#raw.location = 'D:/University of Exeter/Pavez Fox, Melissa - To Share/S' # directory of raw data
#output.location = 'D:/University of Exeter/Pavez Fox, Melissa - To Share/S' # directory of the output data
output.location<-  'C:/Users/mp660/OneDrive - University of Exeter/PhD/Data/Behavioural data/Dominance'
raw.location <-"C:/Users/mp660/Dropbox/Cayo Data Cleaning/Output"
setwd(output.location)
# Import the demographics data for all years
demo_data <- read_excel('ANIMALES IN CS ALL MATRILINE FORM January 2020.xlsx')
#Define group and year of study
GROUP = "S"
YEAR = "2019"
GROUPYEAR = paste("Group",GROUP,YEAR,sep="")
#Import agonistic events and group by year
setwd(raw.location)
ago_events <- read.delim(paste(GROUPYEAR,"_AgonisticActions.txt",sep=""),sep=",")
group_by_year <- read.delim(paste(GROUPYEAR,"_GroupByYear.txt",sep=""),sep=",")
##Convert factors to vectors
ago_events <- ago_events %>%  mutate_if(is.factor, as.character)
keep.type = c('avoid','contactagg','contactAgg','displace','feargrm','FearGrm','noncontactagg','noncontactAgg','submit','Submit',
'submit/threat','Submit/threat','threat') # rows to keep
discard.loser = c('juvenile male','infant','juvenile','juvenile female','adult male','adult female','unknown')                            # rows to discard
discard.winner = c("juvenile",'unknown','adult male','juvenile female','adult female','juvenile male','infant')            # rows to discard
Females.agonistic<-ago_events %>% filter (winner_sex == "Female", agonism_type %in% keep.type,
loser_sex == "Female", !(agonism_loser %in% discard.loser),
!(agonism_winner %in% discard.winner)) %>% select(winner = agonism_winner, loser = agonism_loser, date)
fem.list<- group_by_year %>% filter(sex == "F") %>% select(id)
Females.agonistic<- Females.agonistic %>% subset(winner %in% fem.list$id) %>% subset(loser %in% fem.list$id)
length(unique(c(as.character(Females.agonistic$winner),as.character(Females.agonistic$loser))))
#Build adjacency matrix
G<- graph_from_data_frame(Females.agonistic, directed= TRUE)
A <- as_adjacency_matrix(G,names=TRUE,sparse=FALSE,type='lower')
A<- A[,order(colnames(A))] #Order columns in alphabetical order
fem.matrix<- A[order(rownames(A)),]#Order rows in alphabetical order
diag(fem.matrix)<- 0 #Add zero to diagonal /self-interacions
#Save matrix
setwd(output.location)
write.csv(fem.matrix,'F.ago.matrx.csv')
fem.list$mom <- ""
fem.list$supermom <- ""
R = nrow(fem.list)
for (i in 1:R){ # Find the supermoms for the females
mom = demo_data$`Behavior Mom`[match(fem.list$id[i],demo_data$`Animal ID`)]
while (!grepl("^[0-9]+$", mom, perl = T)){
if (!is.na(match(mom,fem.list$id))){
fem.list$mom[i] = paste(mom,fem.list$mom[i],sep = "/")
}
mom = demo_data$`Behavior Mom`[match(mom,demo_data$`Animal ID`)]
}
fem.list$supermom[i] =  mom
}
#Adjust the data to fit it into a data.tree
fem.list$mom =  substr(fem.list$mom,1,nchar(fem.list$mom)-1)
fem.list$pathString <- paste("Matriline",fem.list$supermom,fem.list$mom,fem.list$id,sep = "/")
fem.list <- fem.list %>% mutate_if(is.factor,as.character)
#Calculat #loses per animal from data matrix and add it to the fem.list dataframe
loses = colSums(fem.matrix, na.rm = FALSE, dims = 1) # number of loses sum
loses<- as.data.frame(loses)
setDT(loses, keep.rownames = TRUE)[]
fem.list$loses<- loses$loses[match(fem.list$id,loses$rn)]
wins = rowSums(fem.matrix, na.rm = FALSE, dims = 1) #number of wins sum
wins<- as.data.frame(wins)
setDT(wins, keep.rownames = TRUE)[]
fem.list$wins<- wins$wins[match(fem.list$id,wins$rn)]
#Add total number of interactions to manually calculat Elo Rating
fem.list$total<- (fem.list$loses+ fem.list$wins)
fem.list$Elo<- ((100 * fem.list$wins) - (100*fem.list$loses))/fem.list$total
#Create the data.tree
Matri <- as.Node(fem.list)
Matri = Sort(Matri, attribute="loses", decreasing = FALSE)
print(Matri, "loses")
#Paste the rank in a dataframe
mat.frame <- ToDataFrameTree(Matri,"loses")
mat.frame$id<- as.character(mat.frame$levelName)
mat.frame$id <- trimws(mat.frame$id)
mat.frame$id <- substr(mat.frame$id, nchar(mat.frame$id)-2,nchar(mat.frame$id))
mat.frame$levelName<-NULL
Matri <- as.Node(fem.list)
Matri = Sort(Matri, attribute="loses", decreasing = FALSE)
print(Matri, "loses")
Matri <- as.Node(fem.list)
print(Matri, "loses")
Matri <- as.Node(fem.list)
print(Matri, "loses")
Matri = Sort(Matri, attribute="loses", decreasing = FALSE)
print(Matri, "loses")
Matri = Sort(Matri, attribute="loses", decreasing = TRUE)
print(Matri, "loses")
Matri <- as.Node(fem.list)
Matri = Sort(Matri, attribute="loses", decreasing = FALSE)
print(Matri, "loses")
Matri = Sort(Matri, attribute="loses", decreasing = FALSE, recursive = TRUE)
print(Matri, "loses")
fem.list<- fem.list[order(loses),]
View(fem.list)
fem.list<- fem.list[order(loses), decreasing=FALSE]
fem.list<- fem.list[order(loses), decreasing = FALSE]
fem.list<- fem.list[order(loses, decreasing = FALSE), ]
View(fem.list)
View(fem.list)
fem.list$loses<- as.numeric(fem.list$loses)
fem.list<- fem.list[order(loses, decreasing = FALSE), ]
View(fem.list)
fem.list<- fem.list[order(fem.list$loses, decreasing = FALSE), ]
View(fem.matrix)
View(fem.list)
Matri <- as.Node(fem.list)
Matri = Sort(Matri, attribute="loses", decreasing = FALSE, recursive = TRUE)
print(Matri, "loses")
mat.frame <- ToDataFrameTree(Matri,"loses")
mat.frame$id<- as.character(mat.frame$levelName)
mat.frame$id <- trimws(mat.frame$id)
mat.frame$id <- substr(mat.frame$id, nchar(mat.frame$id)-2,nchar(mat.frame$id))
mat.frame$levelName<-NULL
View(mat.frame)
output.location<-  'C:/Users/mp660/OneDrive - University of Exeter/PhD/Data/Behavioural data/Dominance'
raw.location <-"C:/Users/mp660/Dropbox/Cayo Data Cleaning/Output"
setwd(output.location)
# Import the demographics data for all years
demo_data <- read_excel('ANIMALES IN CS ALL MATRILINE FORM January 2020.xlsx')
#Define group and year of study
GROUP = "S"
YEAR = "2019"
GROUPYEAR = paste("Group",GROUP,YEAR,sep="")
#Import agonistic events and group by year
setwd(raw.location)
ago_events <- read.delim(paste(GROUPYEAR,"_AgonisticActions.txt",sep=""),sep=",")
group_by_year <- read.delim(paste(GROUPYEAR,"_GroupByYear.txt",sep=""),sep=",")
##Convert factors to vectors
ago_events <- ago_events %>%  mutate_if(is.factor, as.character)
#FEMALES--------
keep.type = c('avoid','contactagg','contactAgg','displace','feargrm','FearGrm','noncontactagg','noncontactAgg','submit','Submit',
'submit/threat','Submit/threat','threat') # rows to keep
discard.loser = c('juvenile male','infant','juvenile','juvenile female','adult male','adult female','unknown')                            # rows to discard
discard.winner = c("juvenile",'unknown','adult male','juvenile female','adult female','juvenile male','infant')            # rows to discard
Females.agonistic<-ago_events %>% filter (winner_sex == "Female", agonism_type %in% keep.type,
loser_sex == "Female", !(agonism_loser %in% discard.loser),
!(agonism_winner %in% discard.winner)) %>% select(winner = agonism_winner, loser = agonism_loser, date)
fem.list<- group_by_year %>% filter(sex == "F") %>% select(id)
Females.agonistic<- Females.agonistic %>% subset(winner %in% fem.list$id) %>% subset(loser %in% fem.list$id)
length(unique(c(as.character(Females.agonistic$winner),as.character(Females.agonistic$loser))))
#Build adjacency matrix
G<- graph_from_data_frame(Females.agonistic, directed= TRUE)
A <- as_adjacency_matrix(G,names=TRUE,sparse=FALSE,type='lower')
A<- A[,order(colnames(A))] #Order columns in alphabetical order
fem.matrix<- A[order(rownames(A)),]#Order rows in alphabetical order
diag(fem.matrix)<- 0 #Add zero to diagonal /self-interacions
#Save matrix
setwd(output.location)
write.csv(fem.matrix,'F.ago.matrx.csv')
#Find the matriline (supermom) for each focal individual
fem.list$mom <- ""
fem.list$supermom <- ""
R = nrow(fem.list)
for (i in 1:R){ # Find the supermoms for the females
mom = demo_data$`Behavior Mom`[match(fem.list$id[i],demo_data$`Animal ID`)]
while (!grepl("^[0-9]+$", mom, perl = T)){
if (!is.na(match(mom,fem.list$id))){
fem.list$mom[i] = paste(mom,fem.list$mom[i],sep = "/")
}
mom = demo_data$`Behavior Mom`[match(mom,demo_data$`Animal ID`)]
}
fem.list$supermom[i] =  mom
}
#Adjust the data to fit it into a data.tree
fem.list$mom =  substr(fem.list$mom,1,nchar(fem.list$mom)-1)
fem.list$pathString <- paste("Matriline",fem.list$supermom,fem.list$mom,fem.list$id,sep = "/")
fem.list <- fem.list %>% mutate_if(is.factor,as.character)
#Calculat #loses per animal from data matrix and add it to the fem.list dataframe
loses = colSums(fem.matrix, na.rm = FALSE, dims = 1) # number of loses sum
loses<- as.data.frame(loses)
setDT(loses, keep.rownames = TRUE)[]
fem.list$loses<- loses$loses[match(fem.list$id,loses$rn)]
#Calculat #wins per animal from data matrix and add it to the fem.list dataframe
wins = rowSums(fem.matrix, na.rm = FALSE, dims = 1) #number of wins sum
wins<- as.data.frame(wins)
setDT(wins, keep.rownames = TRUE)[]
fem.list$wins<- wins$wins[match(fem.list$id,wins$rn)]
#Add total number of interactions to manually calculat Elo Rating
fem.list$total<- (fem.list$loses+ fem.list$wins)
fem.list$Elo<- ((100 * fem.list$wins) - (100*fem.list$loses))/fem.list$total
fem.list<- fem.list[order(fem.list$loses, decreasing = FALSE), ]
#Create the data.tree
Matri <- as.Node(fem.list)
Matri = Sort(Matri, attribute="loses", decreasing = FALSE, recursive = TRUE)
print(Matri, "loses")
#Paste the rank in a dataframe
mat.frame <- ToDataFrameTree(Matri,"loses")
mat.frame$id<- as.character(mat.frame$levelName)
mat.frame$id <- trimws(mat.frame$id)
mat.frame$id <- substr(mat.frame$id, nchar(mat.frame$id)-2,nchar(mat.frame$id))
mat.frame$levelName<-NULL
View(mat.frame)
output.location<-  'C:/Users/mp660/OneDrive - University of Exeter/PhD/Data/Behavioural data/Dominance'
raw.location <-"C:/Users/mp660/Dropbox/Cayo Data Cleaning/Output"
setwd(output.location)
# Import the demographics data for all years
demo_data <- read_excel('ANIMALES IN CS ALL MATRILINE FORM January 2020.xlsx')
#Define group and year of study
GROUP = "S"
YEAR = "2019"
GROUPYEAR = paste("Group",GROUP,YEAR,sep="")
#Import agonistic events and group by year
setwd(raw.location)
ago_events <- read.delim(paste(GROUPYEAR,"_AgonisticActions.txt",sep=""),sep=",")
group_by_year <- read.delim(paste(GROUPYEAR,"_GroupByYear.txt",sep=""),sep=",")
##Convert factors to vectors
ago_events <- ago_events %>%  mutate_if(is.factor, as.character)
#FEMALES--------
keep.type = c('avoid','contactagg','contactAgg','displace','feargrm','FearGrm','noncontactagg','noncontactAgg','submit','Submit',
'submit/threat','Submit/threat','threat') # rows to keep
discard.loser = c('juvenile male','infant','juvenile','juvenile female','adult male','adult female','unknown')                            # rows to discard
discard.winner = c("juvenile",'unknown','adult male','juvenile female','adult female','juvenile male','infant')            # rows to discard
Females.agonistic<-ago_events %>% filter (winner_sex == "Female", agonism_type %in% keep.type,
loser_sex == "Female", !(agonism_loser %in% discard.loser),
!(agonism_winner %in% discard.winner)) %>% select(winner = agonism_winner, loser = agonism_loser, date)
fem.list<- group_by_year %>% filter(sex == "F") %>% select(id)
Females.agonistic<- Females.agonistic %>% subset(winner %in% fem.list$id) %>% subset(loser %in% fem.list$id)
length(unique(c(as.character(Females.agonistic$winner),as.character(Females.agonistic$loser))))
#Build adjacency matrix
G<- graph_from_data_frame(Females.agonistic, directed= TRUE)
A <- as_adjacency_matrix(G,names=TRUE,sparse=FALSE,type='lower')
A<- A[,order(colnames(A))] #Order columns in alphabetical order
fem.matrix<- A[order(rownames(A)),]#Order rows in alphabetical order
diag(fem.matrix)<- 0 #Add zero to diagonal /self-interacions
fem.list$mom <- ""
fem.list$supermom <- ""
R = nrow(fem.list)
for (i in 1:R){ # Find the supermoms for the females
mom = demo_data$`Behavior Mom`[match(fem.list$id[i],demo_data$`Animal ID`)]
while (!grepl("^[0-9]+$", mom, perl = T)){
if (!is.na(match(mom,fem.list$id))){
fem.list$mom[i] = paste(mom,fem.list$mom[i],sep = "/")
}
mom = demo_data$`Behavior Mom`[match(mom,demo_data$`Animal ID`)]
}
fem.list$supermom[i] =  mom
}
#Adjust the data to fit it into a data.tree
fem.list$mom =  substr(fem.list$mom,1,nchar(fem.list$mom)-1)
fem.list$pathString <- paste("Matriline",fem.list$supermom,fem.list$mom,fem.list$id,sep = "/")
fem.list <- fem.list %>% mutate_if(is.factor,as.character)
#Calculat #loses per animal from data matrix and add it to the fem.list dataframe
loses = colSums(fem.matrix, na.rm = FALSE, dims = 1) # number of loses sum
loses<- as.data.frame(loses)
setDT(loses, keep.rownames = TRUE)[]
fem.list$loses<- loses$loses[match(fem.list$id,loses$rn)]
#Calculat #wins per animal from data matrix and add it to the fem.list dataframe
wins = rowSums(fem.matrix, na.rm = FALSE, dims = 1) #number of wins sum
wins<- as.data.frame(wins)
setDT(wins, keep.rownames = TRUE)[]
fem.list$wins<- wins$wins[match(fem.list$id,wins$rn)]
#Add total number of interactions to manually calculat Elo Rating
fem.list$total<- (fem.list$loses+ fem.list$wins)
fem.list$Elo<- ((100 * fem.list$wins) - (100*fem.list$loses))/fem.list$total
fem.list<- fem.list[order(fem.list$loses, decreasing = FALSE), ]
fem.list<- fem.list[order(fem.list$Elo, decreasing = TRUE), ]
fem.list$total<- (fem.list$loses+ fem.list$wins)
fem.list$Elo<- ((100 * fem.list$wins) - (100*fem.list$loses))/fem.list$total
fem.list<- fem.list[order(fem.list$Elo, decreasing = TRUE), ]
#Create the data.tree
Matri <- as.Node(fem.list)
Matri = Sort(Matri, attribute="Elo", decreasing = TRUE)
print(Matri, "Elo")
#Paste the rank in a dataframe
mat.frame <- ToDataFrameTree(Matri,"Elo")
mat.frame$id<- as.character(mat.frame$levelName)
mat.frame$id <- trimws(mat.frame$id)
mat.frame$id <- substr(mat.frame$id, nchar(mat.frame$id)-2,nchar(mat.frame$id))
mat.frame$levelName<-NULL
View(mat.frame)
output.location<-  'C:/Users/mp660/OneDrive - University of Exeter/PhD/Data/Behavioural data/Dominance'
raw.location <-"C:/Users/mp660/Dropbox/Cayo Data Cleaning/Output"
setwd(output.location)
# Import the demographics data for all years
demo_data <- read_excel('ANIMALES IN CS ALL MATRILINE FORM January 2020.xlsx')
#Define group and year of study
GROUP = "HH"
YEAR = "2016"
GROUPYEAR = paste("Group",GROUP,YEAR,sep="")
#Import agonistic events and group by year
setwd(raw.location)
ago_events <- read.delim(paste(GROUPYEAR,"_AgonisticActions.txt",sep=""),sep=",")
group_by_year <- read.delim(paste(GROUPYEAR,"_GroupByYear.txt",sep=""),sep=",")
##Convert factors to vectors
ago_events <- ago_events %>%  mutate_if(is.factor, as.character)
View(ago_events)
unique(ago_events$agonism_type)
output.location<-  'C:/Users/mp660/OneDrive - University of Exeter/PhD/Data/Behavioural data/Dominance'
raw.location <-"C:/Users/mp660/Dropbox/Cayo Data Cleaning/Output"
setwd(output.location)
# Import the demographics data for all years
demo_data <- read_excel('ANIMALES IN CS ALL MATRILINE FORM January 2020.xlsx')
#Define group and year of study
GROUP = "HH"
YEAR = "2016"
GROUPYEAR = paste("Group",GROUP,YEAR,sep="")
#Import agonistic events and group by year
setwd(raw.location)
ago_events <- read.delim(paste(GROUPYEAR,"_AgonisticActions.txt",sep=""),sep=",")
group_by_year <- read.delim(paste(GROUPYEAR,"_GroupByYear.txt",sep=""),sep=",")
##Convert factors to vectors
ago_events <- ago_events %>%  mutate_if(is.factor, as.character)
#FEMALES--------
keep.type = c('avoid','contactagg','contactAgg','displace','feargrm','FearGrm','noncontactagg','noncontactAgg','submit','Submit',
'submit/threat','Submit/threat','threat') # rows to keep
discard.loser = c('juvenile male','infant','juvenile','juvenile female','adult male','adult female','unknown')                            # rows to discard
discard.winner = c("juvenile",'unknown','adult male','juvenile female','adult female','juvenile male','infant')            # rows to discard
Females.agonistic<-ago_events %>% filter (winner_sex == "Female", agonism_type %in% keep.type,
loser_sex == "Female", !(agonism_loser %in% discard.loser),
!(agonism_winner %in% discard.winner)) %>% select(winner = agonism_winner, loser = agonism_loser, date)
fem.list<- group_by_year %>% filter(sex == "F") %>% select(id)
Females.agonistic<- Females.agonistic %>% subset(winner %in% fem.list$id) %>% subset(loser %in% fem.list$id)
length(unique(c(as.character(Females.agonistic$winner),as.character(Females.agonistic$loser))))
G<- graph_from_data_frame(Females.agonistic, directed= TRUE)
A <- as_adjacency_matrix(G,names=TRUE,sparse=FALSE,type='lower')
A<- A[,order(colnames(A))] #Order columns in alphabetical order
fem.matrix<- A[order(rownames(A)),]#Order rows in alphabetical order
diag(fem.matrix)<- 0 #Add zero to diagonal /self-interacions
#Save matrix
fem.list$mom <- ""
fem.list$supermom <- ""
R = nrow(fem.list)
for (i in 1:R){ # Find the supermoms for the females
mom = demo_data$`Behavior Mom`[match(fem.list$id[i],demo_data$`Animal ID`)]
while (!grepl("^[0-9]+$", mom, perl = T)){
if (!is.na(match(mom,fem.list$id))){
fem.list$mom[i] = paste(mom,fem.list$mom[i],sep = "/")
}
mom = demo_data$`Behavior Mom`[match(mom,demo_data$`Animal ID`)]
}
fem.list$supermom[i] =  mom
}
#Adjust the data to fit it into a data.tree
fem.list$mom =  substr(fem.list$mom,1,nchar(fem.list$mom)-1)
fem.list$pathString <- paste("Matriline",fem.list$supermom,fem.list$mom,fem.list$id,sep = "/")
fem.list <- fem.list %>% mutate_if(is.factor,as.character)
#Calculat #loses per animal from data matrix and add it to the fem.list dataframe
loses = colSums(fem.matrix, na.rm = FALSE, dims = 1) # number of loses sum
loses<- as.data.frame(loses)
setDT(loses, keep.rownames = TRUE)[]
fem.list$loses<- loses$loses[match(fem.list$id,loses$rn)]
#Calculat #wins per animal from data matrix and add it to the fem.list dataframe
wins = rowSums(fem.matrix, na.rm = FALSE, dims = 1) #number of wins sum
wins<- as.data.frame(wins)
setDT(wins, keep.rownames = TRUE)[]
fem.list$wins<- wins$wins[match(fem.list$id,wins$rn)]
#Add total number of interactions to manually calculat Elo Rating
fem.list$total<- (fem.list$loses+ fem.list$wins)
fem.list$Elo<- ((100 * fem.list$wins) - (100*fem.list$loses))/fem.list$total
fem.list<- fem.list[order(fem.list$loses, decreasing = FALSE), ]
#Create the data.tree
Matri <- as.Node(fem.list)
Matri = Sort(Matri, attribute="loses", decreasing = FALSE)
print(Matri, "loses")
View(fem.list)
mat.frame <- ToDataFrameTree(Matri,"loses")
mat.frame$id<- as.character(mat.frame$levelName)
mat.frame$id <- trimws(mat.frame$id)
mat.frame$id <- substr(mat.frame$id, nchar(mat.frame$id)-2,nchar(mat.frame$id))
mat.frame$levelName<-NULL
View(mat.frame)
fem.list$total<- (fem.list$loses+ fem.list$wins)
fem.list$Elo<- ((100 * fem.list$wins) - (100*fem.list$loses))/fem.list$total
fem.list<- fem.list[order(fem.list$Elo, decreasing = TRUE), ]
#Create the data.tree
Matri <- as.Node(fem.list)
Matri = Sort(Matri, attribute="Elo", decreasing = TRUE)
print(Matri, "Elo")
#Paste the rank in a dataframe
mat.frame <- ToDataFrameTree(Matri,"Elo")
mat.frame$id<- as.character(mat.frame$levelName)
mat.frame$id <- trimws(mat.frame$id)
mat.frame$id <- substr(mat.frame$id, nchar(mat.frame$id)-2,nchar(mat.frame$id))
mat.frame$levelName<-NULL
View(mat.frame)
